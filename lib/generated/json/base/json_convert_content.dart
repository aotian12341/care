// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart';
import 'package:care/model/address_info.dart';
import 'package:care/model/demand_info.dart';
import 'package:care/model/demand_page.dart';
import 'package:care/model/dictionary_item.dart';
import 'package:care/model/order/order_info.dart';
import 'package:care/model/order/order_page_info.dart';
import 'package:care/model/pay_info.dart';
import 'package:care/model/pois_info.dart';
import 'package:care/model/shop_Info.dart';
import 'package:care/model/staff_info.dart';
import 'package:care/model/staff_list_info.dart';
import 'package:care/model/user_info.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);

class JsonConvert {
  static final Map<String, JsonConvertFunction> _convertFuncMap = {
    (AddressInfo).toString(): AddressInfo.fromJson,
    (DemandInfo).toString(): DemandInfo.fromJson,
    (DemandAddressInfo).toString(): DemandAddressInfo.fromJson,
    (DemandPage).toString(): DemandPage.fromJson,
    (DemandPagesList).toString(): DemandPagesList.fromJson,
    (DemandPagesListWorkers).toString(): DemandPagesListWorkers.fromJson,
    (DictionaryItem).toString(): DictionaryItem.fromJson,
    (OrderInfo).toString(): OrderInfo.fromJson,
    (OrderAddressInfo).toString(): OrderAddressInfo.fromJson,
    (OrderWorkers).toString(): OrderWorkers.fromJson,
    (OrderPageInfo).toString(): OrderPageInfo.fromJson,
    (OrderPageRecords).toString(): OrderPageRecords.fromJson,
    (PayInfo).toString(): PayInfo.fromJson,
    (PoisInfo).toString(): PoisInfo.fromJson,
    (PoisPois).toString(): PoisPois.fromJson,
    (ShopInfo).toString(): ShopInfo.fromJson,
    (StaffInfo).toString(): StaffInfo.fromJson,
    (StaffListInfo).toString(): StaffListInfo.fromJson,
    (StaffListList).toString(): StaffListList.fromJson,
    (UserInfo).toString(): UserInfo.fromJson,
  };

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
    final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }
      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type == "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type == "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else if (type == "Map" || type.startsWith("Map<")) {
        return value as T;
      } else {
        if (_convertFuncMap.containsKey(type)) {
          return _convertFuncMap[type]!(value) as T;
        } else {
          throw UnimplementedError('$type unimplemented');
        }
      }
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AddressInfo>[] is M) {
      return data
          .map<AddressInfo>((Map<String, dynamic> e) => AddressInfo.fromJson(e))
          .toList() as M;
    }
    if (<DemandInfo>[] is M) {
      return data
          .map<DemandInfo>((Map<String, dynamic> e) => DemandInfo.fromJson(e))
          .toList() as M;
    }
    if (<DemandAddressInfo>[] is M) {
      return data
          .map<DemandAddressInfo>(
              (Map<String, dynamic> e) => DemandAddressInfo.fromJson(e))
          .toList() as M;
    }
    if (<DemandPage>[] is M) {
      return data
          .map<DemandPage>((Map<String, dynamic> e) => DemandPage.fromJson(e))
          .toList() as M;
    }
    if (<DemandPagesList>[] is M) {
      return data
          .map<DemandPagesList>(
              (Map<String, dynamic> e) => DemandPagesList.fromJson(e))
          .toList() as M;
    }
    if (<DemandPagesListWorkers>[] is M) {
      return data
          .map<DemandPagesListWorkers>(
              (Map<String, dynamic> e) => DemandPagesListWorkers.fromJson(e))
          .toList() as M;
    }
    if (<DictionaryItem>[] is M) {
      return data
          .map<DictionaryItem>(
              (Map<String, dynamic> e) => DictionaryItem.fromJson(e))
          .toList() as M;
    }
    if (<OrderInfo>[] is M) {
      return data
          .map<OrderInfo>((Map<String, dynamic> e) => OrderInfo.fromJson(e))
          .toList() as M;
    }
    if (<OrderAddressInfo>[] is M) {
      return data
          .map<OrderAddressInfo>(
              (Map<String, dynamic> e) => OrderAddressInfo.fromJson(e))
          .toList() as M;
    }
    if (<OrderWorkers>[] is M) {
      return data
          .map<OrderWorkers>(
              (Map<String, dynamic> e) => OrderWorkers.fromJson(e))
          .toList() as M;
    }
    if (<OrderPageInfo>[] is M) {
      return data
          .map<OrderPageInfo>(
              (Map<String, dynamic> e) => OrderPageInfo.fromJson(e))
          .toList() as M;
    }
    if (<OrderPageRecords>[] is M) {
      return data
          .map<OrderPageRecords>(
              (Map<String, dynamic> e) => OrderPageRecords.fromJson(e))
          .toList() as M;
    }
    if (<PayInfo>[] is M) {
      return data
          .map<PayInfo>((Map<String, dynamic> e) => PayInfo.fromJson(e))
          .toList() as M;
    }
    if (<PoisInfo>[] is M) {
      return data
          .map<PoisInfo>((Map<String, dynamic> e) => PoisInfo.fromJson(e))
          .toList() as M;
    }
    if (<PoisPois>[] is M) {
      return data
          .map<PoisPois>((Map<String, dynamic> e) => PoisPois.fromJson(e))
          .toList() as M;
    }
    if (<ShopInfo>[] is M) {
      return data
          .map<ShopInfo>((Map<String, dynamic> e) => ShopInfo.fromJson(e))
          .toList() as M;
    }
    if (<StaffInfo>[] is M) {
      return data
          .map<StaffInfo>((Map<String, dynamic> e) => StaffInfo.fromJson(e))
          .toList() as M;
    }
    if (<StaffListInfo>[] is M) {
      return data
          .map<StaffListInfo>(
              (Map<String, dynamic> e) => StaffListInfo.fromJson(e))
          .toList() as M;
    }
    if (<StaffListList>[] is M) {
      return data
          .map<StaffListList>(
              (Map<String, dynamic> e) => StaffListList.fromJson(e))
          .toList() as M;
    }
    if (<UserInfo>[] is M) {
      return data
          .map<UserInfo>((Map<String, dynamic> e) => UserInfo.fromJson(e))
          .toList() as M;
    }

    debugPrint("${M.toString()} not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is List) {
      return _getListChildType<M>(
          json.map((e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.asT<M>(json);
    }
  }
}
